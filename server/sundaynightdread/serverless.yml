service: sundaynightdread

provider:
  # Twilio runtime as your preferred provider
  name: twilio

  # Auth credentials which you'll find at twilio.com/console
  config:
    accountSid: ${env:TWILIO_ACCOUNT_SID}
    authToken: ${env:TWILIO_AUTH_TOKEN}

  # Dependency definitions similar
  # to dependencies in a package.json
  # -> these dependencies will be available in the
  #    Twilio Node.js runtime
  dependencies:
    # asciiart-logo: '*'

  # Twilio runtime supports several domains
  # your functions and assets will be available under
  # -> defaulting to 'dev'
  environment: ${env:TWILIO_RUNTIME_ENV, 'dev'}

  # Environment variables passed to your functions
  # available via process.env
  environmentVars:
    MSG_OPTIN: 'Ready to conquer your Sunday Night Dread?  Respond with "YES" to get inspired by Arnold!'
    PHONE_FROM: ${file(serverless.env.yml):phoneFrom}
    PHONE_TO: ${file(serverless.env.yml):phoneTo}
    MP3_URL: ${file(serverless.env.yml):mp3URL}

# Twilio runtime has to be added a plugin
plugins:
  - '@twilio-labs/serverless-twilio-runtime'

functions:
  register-newuser:
    # Path to the JS handler function in the project (without file extension '.js')
    handler: register
    # URL path of the function after deployment
    path: /register/newuser
    # visibility of the function (can be "public" or "protected")
    access: public
  play-mp3:
    # Path to the JS handler function in the project (without file extension '.js')
    handler: playmp3
    # URL path of the function after deployment
    path: /play/mp3
    # visibility of the function (can be "public" or "protected")
    access: public

resources:
  assets:
    # Asset name
    example-image:
      # path to the asset in the project
      filePath: arnold-who-do-you-want-to-be.mp3
      # URL path to the asset after deployment
      path: /assets/arnold-who-do-you-want-to-be.mp3
      # visibility of the asset
      access: public
